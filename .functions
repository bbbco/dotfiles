# Use .... to cd
#for i in {1..9};do c=;d=;for u in `eval echo {1..$i}`;do c="$c../";d="$d..";eval "$d(){ cd $c;}"; eval "$d.(){ cd $c;}";done;done

# gdate == gnu date in mac; create alias if not available
which gdate &> /dev/null || alias gdate='date'

# numstats
function numstats(){
    sort -n | awk '
      BEGIN {
        c = 0;
        sum = 0;
      }
      $1 ~ /^(\-)?[0-9]*(\.[0-9]*)?$/ {
        a[c++] = $1;
        sum += $1;
      }
      END {
        ave = sum / c;
        if( (c % 2) == 1 ) {
          median = a[ int(c/2) ];
        } else {
          median = ( a[c/2] + a[c/2-1] ) / 2;
        }
        OFS="\t";
        print "Sum", "Count", "Average", "Median", "Min", "Max"
        print sum, c, ave, median, a[0], a[c-1];
      }
    '
}

# jsoncat
function jsoncat(){ cat "${1}" | python -mjson.tool; }

function pyobj2json(){
    python -c '
import json, sys
file_object = sys.stdin
json_output = eval(file_object.read())
print json.dumps(json_output)
    ' $@
}

# json2yaml
function json2yaml(){
    python -c '
import sys, json, yaml
with open(sys.argv[1], 'r') if len(sys.argv) > 1 else sys.stdin as f:
    print yaml.safe_dump(json.load(f), default_flow_style=False)
        ' $@
}

function yaml2json(){
    python -c '
import yaml, json, sys
with open(sys.argv[1]) as f:
    print json.dumps(yaml.load(f), sort_keys=True, indent=2)
        ' $@
}

# Epoch Converter
function epoch2time() (
    function e2t() {
        if [ ${#1} -ge 13 ]; then
            EPOCH=${1:0: -3}
        else
            EPOCH=${1}
        fi
        FORMAT=${*:2}
        gdate -d "@${EPOCH}" ${FORMAT}
    }
    if [[ ${1} == "-" ]]; then
        STDIN=($(</dev/stdin))
        for S in ${STDIN}; do
            e2t ${S} ${*:2}
        done
    else
        e2t ${1} ${*:2}
    fi
)
function upoch2time() { TZ='UTC-0' epoch2time ${*}; }
function time2epoch() { echo "$(gdate -d "${1}" +%s)000"; }
function time2upoch() { echo "$(TZ='UTC-0' gdate -d "${1}" +%s)000"; }
function istdate() { TZ='Asia/Kolkata' gdate ${@} }
function utcdate() { gdate -u ${@} }
function since() {
    first=$(gdate -d "${1}" +%s)
    second=$(gdate -d "${2}" +%s)
    secs=$(( ${second} - ${first} ))
    if [ ${secs} -lt 0 ]; then
        secs=$(( ${secs} * -1 ))
    fi
    day=$(( 60*60*24 ))
    days=$(( $secs / ${day}  ))
    secs=$(( ${secs} - ( ${days} * ${day} )  ))
    hour=$(( 60*60  ))
    hours=$(( ${secs} / ${hour} ))
    secs=$(( ${secs} - ( ${hours} * ${hour} ) ))
    minute=$(( 60  ))
    minutes=$(( ${secs} / ${minute} ))
    secs=$(( ${secs} - ( ${minutes} * ${minute} ) ))
    echo "First: $(date -d @${first}) ; Second: $(date -d @${second})"
    echo "${days} days, ${hours} hours, ${minutes} minutes, ${secs} seconds"
}

# Only show hidden files
function hidden() {
    ls -a "$@" | grep '^\.'
}

# Daily Working Dir
function dwd() {
    if [[ $(uname) == "Darwin" ]]; then
      if [ -n "$1" ]; then
          DATE="$(gdate -d ${1} +%Y%m%d)"
      else
          DATE="$(gdate +%Y%m%d)"
      fi
    else
      if [ -n "$1" ]; then
          DATE="$(date -d ${1} +%Y%m%d)"
      else
          DATE="$(date +%Y%m%d)"
      fi
    fi
    DWD="${HOME}/dwd/${DATE}"
    if [ ! -d "${DWD}" ]; then
        mkdir "${DWD}"
    fi
    echo "${DWD}"
}

function _dwd() {
    DWD=$(dwd ${@})
    cd ${DWD}
}

# Send alert when previous command fails
function notify-on-fail() {
    if [ "${PIPESTATUS[${#PIPESTATUS[@]}-1]}" != "0" ]; then notify-send "ERROR!" ; fi;
}

# SSH
function sshos-colored() {
    ct -Ge "#run {ssh} {ssh -i /home/bgoad/.ssh/pem_keys/openstack.pem -o \"UserKnownHostsFile /dev/null\" -o StrictHostKeyChecking=no -o CanonicalizeHostname=yes -o CanonicalDomains=digitalsmithsdev.net -l root ${@}}";
}

function sshos() {
    ssh -i /home/bgoad/.ssh/pem_keys/openstack.pem -o "UserKnownHostsFile /dev/null" -o StrictHostKeyChecking=no -o CanonicalizeHostname=yes -o CanonicalDomains=digitalsmithsdev.net -l root ${@};
}

function sshaws() {
    AWS_NODE=${1}
    AWS_PEM="$(ec2-instance ${AWS_NODE} | jq '.KeyName' -r).pem"
    ssh -i /home/bgoad/.ssh/pem_keys/${AWS_PEM} -o "UserKnownHostsFile /dev/null" -o StrictHostKeyChecking=no -o CanonicalizeHostname=yes -o CanonicalDomains=digitalsmithsdev.net -l root ${AWS_NODE} "${@:2}"
}

function sshdqs() {
    ssh -i /home/bgoad/.ssh/pem_keys/devqa-scalability.pem -o "UserKnownHostsFile /dev/null" -o StrictHostKeyChecking=no -o CanonicalizeHostname=yes -o CanonicalDomains=digitalsmithsdev.net -l root ${@};
}

knife-replace-db(){

#    DBI="$(grep '"id":' "${1}" | cut -d\" -f4)"
#    DB=$(echo "${1}" | sed -e 's/data_bags\/\([^\/]*\)(-dev)?\/.*/\1/')

        DB="$(echo "${1}" | sed -e 's/data_bags\///' -e 's/-dev//' -e 's:/: :g' -e 's/\.json//')"
        FILE="${2-${1}}"
        echo "knife data bag show ${DB} -F json > "${FILE}""
#    knife data bag show ${DB} -F json > "${FILE}"
}

function kdbd-push() {
    if [ -z "${1}" ]; then
        echo "No file passed!"
        return 1
    fi
    kdbd ${1} || { echo "Fix issue!"; return 1; } && {
        git stash
        git pull
        git stash pop
        git add ${1}
        git commit -m "${1} update"
        git reset HEAD chef-cookbooks
        git push
    }
}


function decode_url() {
    ruby -e "require 'uri'; puts URI.decode_www_form_component(\"${1}\")"
}

function cpswap() {
    F=${1}.tmp
        mv "${1}" "${F}"
        mv "${2}" "${1}"
        mv "${F}" "${2}"
}

function bak() {
    cp ${1} ${1}.bak
}

# Git
function git_branch() {
    git symbolic-ref -q --short HEAD || git describe --tags --exact-match
}

function is_git() {
    [ -d .git ] || git rev-parse --git-dir > /dev/null 2>&1
}

function git_root() {
    git rev-parse --show-toplevel
}

# FFS Builds
function ffs_path() {
    is_git && export FFS_HOME=$(git_root) || export FFS_HOME=~/digitalsmiths/git/product/ffs
}

function ffs_docker_path() {
    ffs_path && echo "${FFS_HOME}/ffs-server/target/docker"
}

function ffs_mvn_build() {
    local orig_dir=$(pwd)
        ffs_path
        cd ${FFS_HOME}
    mvn -B -U -TC1 clean install -DskipTests -Pbuild-rpms,docker
        cd ${orig_dir}
    ffs_docker_up
}

function delete_from_history() {
    if [ -z ${@} ]; then
        echo "No idea what you're trying to cover up!"
    fi
    LC_ALL=C sed -i "/${@}/d" ${HISTFILE}
}


function ansible_cp_inventory() {
    old_deployment=$1
    new_deployment=$2
    cd ~/ansible/inventory/
    for f in $(find . -name ${old_deployment}*); do
        new_f=${f/${old_deployment}/${new_deployment}}
        echo "copying ${f} to ${new_f}"
        cp ${f} ${new_f}
        sed -i "s/${old_deployment}/${new_deployment}/g" ${new_f}
    done
}

function pos() {
    STDIN=($(</dev/stdin))
    POS=${1}
    echo "${STDIN}" | tail -n 1
    N=1
    until [ ${N} -eq ${POS} ]; do
      echo -n " "
      N=$((N+1))
    done
    echo "^"
}

function s3_output() {
    if [ -z "${1}" ]; then
      echo "No S3 Path Specified"
      return 1
    fi
    aws s3 cp ${1} -
}

alias human_size="awk '{ suffix=\"KMGT\"; for(i=0; \$1>1024 && i < length(suffix); i++) \$1/=1024; printf(\"%.2f %c%c\n\", \$1, substr(suffix, i, 1), \"B\")}'"

function s3_size(){
    aws s3 ls ${1} --recursive --summarize | tail -n1 | cut -d\: -f2 | human_size
}

function yjq() {
    if [ "${1}" == "-j" ]; then
        yq r ${2:-} -j
    else
        yq r ${2:-} -j | jq "${1}"
    fi
}

function sfdx_remote_diff() {
    remote=$1
    diff_file=$2
    SFDX_DIFF_JSON=$(sfdx force:source:diff -p ${diff_file} -u ${remote} --json)
    git diff $(echo ${SFDX_DIFF_JSON} | jq '.result.remote' -r) $(echo ${SFDX_DIFF_JSON} | jq '.result.local' -r)
}

jdk() {
    version=$1
    export JAVA_HOME=$(/usr/libexec/java_home -v"$version");
    java -version
}

# Plucks a line out of stdin or a file
pluckl() {
    local linenum=${1} 
    local input=""
    if [[ -p /dev/stdin ]]; then
      input="$(cat -)"
    elif [[ -e "${2}" ]]; then 
      input="$(cat ${2})"
    fi

    if [[ -z "${input}" ]] || [[ -z "${linenum}" ]]; then
      return 1
    fi

    echo "${input}" | head -n ${linenum} | tail -n 1
} 
