set shell=/bin/sh

let g:lucius_no_term_bg = 1
colorscheme lucius
"LuciusBlack
"hi clear IndentGuidesOdd

"hi clear Normal
"hi Normal       ctermfg=254 guifg=#d0d0d0 ctermbg=16 guibg=#00005F cterm=none gui=none

"let g:indent_guides_auto_colors = 0
"hi IndentGuidesOdd   ctermbg=232
"hi IndentGuidesEven   ctermbg=236

"set ts=4 sw=4 noet

"colorscheme gruvbox
"colorscheme marklar

""colorscheme solarized
""let g:solarized_termcolors=256

" Complete keywords from not imported modules (could make completion slower)
" Enable autoimport used modules
call pymode#default('g:pymode_rope_autoimport', 0)


" Enable PasteMode on F2
nnoremap <F2> :set invpaste paste?<CR>
set showmode

let &t_SI .= "\<Esc>[?2004h"
let &t_EI .= "\<Esc>[?2004l"

inoremap <special> <expr> <Esc>[200~ XTermPasteBegin()

function! XTermPasteBegin()
  set pastetoggle=<Esc>[201~
  set paste
  return ""
endfunction

" Clipboard
set clipboard=unnamedplus

" Disable Syntax Highlighting During Diffing
if &diff | syntax off | endif

" Remove whitespace via <F5>
:nnoremap <silent> <F5> :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR> :retab! <CR>

" Neocomplete Fixes
set backspace=indent,eol,start

let g:neocomplete#force_overwrite_completefunc = 0
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'
"let g:neocomplcache_enable_camel_case_completion = 1
"let g:neocomplcache_enable_underbar_completion = 1
" Neocomplete remove completes when moving around in insert mode.
let g:neocomplete#enable_insert_char_pre = 1
inoremap <expr><CR> neosnippet#expandable() ? neosnippet#mappings#expand_or_jump_impl() : pumvisible() ? neocomplete#close_popup() : "\<CR>"
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <Left> neocomplete#close_popup() . "\<Left>"
inoremap <expr> <Right> neocomplete#close_popup() . "\<Right>"
inoremap <expr> <Up> neocomplete#close_popup() . "\<Up>"
inoremap <expr> <Down> neocomplete#close_popup() . "\<Down>"
inoremap <expr> <Cr> neocomplete#close_popup() . "\<Cr>"
inoremap <expr> <C-?> neocomplete#smart_close_popup() . "\<BS>"
let g:spf13_noninvasive_completion = 1

" Ruby is an oddball in the family, use special spacing/rules
if v:version >= 703
  " Note: Relative number is quite slow with Ruby, so is cursorline
  autocmd FileType ruby setlocal ts=2 sts=2 sw=2 norelativenumber nocursorline
else
  autocmd FileType ruby setlocal ts=2 sts=2 sw=2
endif
augroup ft_rb
    au!
    " fix the SLOOOW syntax highlighting
    au FileType ruby setlocal re=1 foldmethod=manual
augroup END



" Spell check for markdown
autocmd BufRead,BufNewFile *.rst,*.md setlocal spell
set wrap
set linebreak

" Simply underline misspelled words
hi clear SpellBad
hi SpellBad cterm=underline

map <F7> mzgg=G`z

let g:pymode_options_max_line_length=120
let g:syntastic_python_checkers=['flake8']
let g:syntastic_python_flake8_args='--ignore=E501,E225'
let g:syntastic_python_checker_args = "--max-line-length=160"
let g:syntastic_ruby_checkers = ['rubocop']

" Copy / paste
vmap <leader>y :w! /tmp/.vim_tmp_clipboard<CR>
nmap <leader>p :r! cat /tmp/.vim_tmp_clipboard<CR>

" NERDCommenter align comments to the left
let g:NERDDefaultAlign = "start"
let g:NERDRemoveExtraSpaces = "false"

" Add Robot support
let g:NERDCustomDelimiters = {
    \ 'robot': { 'left': '#' }
    \ }
